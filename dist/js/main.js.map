{"version":3,"sources":["main.js"],"names":["require","bgValues","ctValues","countyValues","type","symbol","color","outline","width","content","text","basemap","container","zoom","view","censusBlocks","outFields","visible","popupTemplate","bgTemplate","query","censusTracts","ctTemplate","ctQuery","url","map","$links","$","$arrows","$panelDivs","$content","target","$allLinks","home","baseToggle","nextBasemap","document","legend","bgReportValues","ctValueSelect","features","feature","values","option","option2","valueSelect","response","item","ctOption","ctOption2","ctReportValues","selValue","countyLayerView","filter","where","excludedEffect","ctValue","layerView","gridFields","dataStore","objectStore","idProperty","countyTask","blockTask","tractTask","params","returnGeometry","createGrid","obj","grid","carGrid","ageGrid","incomeGrid","populationGrid","field","sortable","hidden","label","columns","format","dojoNum","educateGrid","langGrid","boundaryValue","customExportCSV","convertArrayOfObjectsToCSV","data","encodedUri","encodeURI","link","value","columnDelimiter","lineDelimiter","keys","result","ctr"],"mappings":"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":["require([\r\n  \"esri/Map\",\r\n  \"esri/WebMap\",\r\n  \"esri/views/MapView\",\r\n  \"esri/widgets/LayerList\",\r\n  \"esri/layers/FeatureLayer\",\r\n  \"esri/widgets/Home\",\r\n  \"esri/widgets/BasemapToggle\",\r\n  \"esri/widgets/Zoom\",\r\n  \"esri/widgets/Legend\",\r\n  \"esri/tasks/QueryTask\",\r\n  \"esri/tasks/support/Query\",\r\n  \"dgrid/OnDemandGrid\",\r\n  \"dgrid/extensions/ColumnHider\",\r\n  \"dojo/store/Memory\",\r\n  \"dstore/legacy/StoreAdapter\",\r\n  \"dgrid/Selection\",\r\n  \"dojo/_base/declare\",\r\n  \"dojo/number\",\r\n  \"dojox/grid/EnhancedGrid\",\r\n  \"dojox/grid/enhanced/plugins/exporter/CSVWriter\"\r\n], function(\r\n  Map,\r\n  WebMap,\r\n  MapView,\r\n  LayerList,\r\n  FeatureLayer,\r\n  Home,\r\n  BasemapToggle,\r\n  Zoom,\r\n  Legend,\r\n  QueryTask,\r\n  Query,\r\n  OnDemandGrid,\r\n  ColumnHider,\r\n  Memory,\r\n  StoreAdapter,\r\n  Selection,\r\n  declare,\r\n  dojoNum,\r\n  EnhancedGrid,\r\n  CSVWriter\r\n) {\r\n  //==========================\r\n  //Variable list\r\n  var bgValues = [];\r\n  var ctValues = [];\r\n  var countyValues = [];\r\n\r\n  //==========================\r\n  //Set up the renderers for the layers\r\n  var ctRenderer = {\r\n    type: \"simple\",\r\n    symbol: {\r\n      type: \"simple-fill\",\r\n      color: [0, 0, 0, 0],\r\n      outline: {\r\n        color: [128, 0, 0, 0.7],\r\n        width: 2\r\n      }\r\n    }\r\n  };\r\n\r\n  var countRenderer = {\r\n    type: \"simple\",\r\n    symbol: {\r\n      type: \"simple-fill\",\r\n      color: [255, 211, 127, 0.5],\r\n      outline: {\r\n        color: [110, 110, 110, 0.5],\r\n        width: 1.5\r\n      }\r\n    }\r\n  };\r\n\r\n  var bgRenderer = {\r\n    type: \"simple\",\r\n    symbol: {\r\n      type: \"simple-fill\",\r\n      color: [0, 0, 0, 0],\r\n      outline: {\r\n        color: [0, 77, 168, 0.7],\r\n        width: 1.5\r\n      }\r\n    }\r\n  };\r\n\r\n  //==========================\r\n  //Create the different popup templates\r\n  var ctTemplate = {\r\n    title: \"{Tract}\",\r\n    content: [\r\n      {\r\n        type: \"text\",\r\n        text:\r\n        \"<b>Total Population</b>: {Pop_Total}<br /><b>Total Number of Households</b>: {HH_Total}<br /><b>Total Number of Housing Units</b>: {HU_Total}<br /> <br /><b>White Population</b>: {Pop_White}<br /><b>Black Population</b>: {Pop_Black}<br /><b>Hispanic Population</b>: {Pop_Hispanic}<br /><b>Asian Population</b>: {Pop_Asian}<br /><b>Other Population</b>: {Pop_Other}<br /> <br /><b>People under age 5</b>: {Age_Under_5}<br /><b>People between age 5 and 17</b>: {Age_5to17}<br /><b>People between age 18 and 34</b>: {Age_18to34}<br /><b>People between age 35 and 64</b>: {Age_35to64}<br /><b>People Age 65 and Older</b>: {Age_65plus}<br /> <br /><b>Households with no car</b>: {Auto_0_Car}<br /><b>Households with 1 car</b>: {Auto_1_Car}<br /><b>Households with 2 cars</b>: {Auto_2_Car}<br /><b>Households with 3 cars</b>: {Auto_3_Car}<br /><b>Households with 4+ cars</b>: {Auto_4Plus_Car}<br /> <br /><b>People with no high school degree</b>: {Edu_No_High_School}<br /><b>People with high school degree</b>: {Edu_High_School}<br /><b>People with Associate/some degree</b>: {Edu_Associate}<br /><b>People with Bachelor's degree</b>: {Edu_Bachelors}<br /><b>People with graduate degree</b>: {Edu_Graduate}<br /> <br /><b>People who speak No English</b>: {Lang_No_Eng}<br /><b>People who speak English not well</b>: {Lang_Eng_Not_Well}<br /><b>People who speak English well</b>: {Lang_Eng_Well}<br /><b>People who speak English very well</b>: {Lang_Eng_Very_Well}<br /><b>People who speak English Only</b>: {Lang_Eng_Only}<br /> <br /><b>Households above poverty</b>: {Pov_Above}<br /><b>Households below poverty</b>: {Pov_Below}<br /><b>Household Income below 25k</b>: {Inc_Below_25}<br /><b>Household Income between 25k and 50k</b>: {Inc_25To50}<br /><b>Household Income between 50k and 100k</b>: {Inc_50To100}<br /><b>Household Income above 100k</b>: {Inc_Above_100}<br /><b>Median household income</b>: {Inc_HH_Median}<br /> <br /><b>Housing - owner occupied</b>: {H_Owner}<br /><b>Housing - renter occupied</b>:  {H_Renter}<br /> <br /><b>Means of travel to work - carpool</b>: {Mot_Carpool}<br /><b>Means of travel to work - drove alone</b>: {Mot_Drove_Alone}<br /><b>Means of travel to work - other</b>: {Mot_Other}<br /><b>Means of travel to work - ped/bike</b>: {Mot_Pedbike}<br /><b>Means of travel to work - telework</b>: {Mot_Telework}<br /><b>Means of travel to work - transit</b>: {Mot_Transit}<br /> <br /><b>Travel time to work - below 5 mins</b>: {Ttw_Below_5}<br /><b>Travel time to work - 5 to 15 mins</b>: {Ttw_5To15}<br /><b>Travel time to work - 15 to 30 mins</b>: {Ttw_15To30} <br /><b>Travel time to work - 30 to 60 mins</b>: {Ttw_30To60}<br /><b>Travel time to work - 60 mins and above</b>: {Ttw_60Plus}<br /> <br /><b>% of people with income below poverty level (past 12 months)</b>: {Pov_rate}<br /><b>Unemployment Rate</b>: {Unemp_rate}<br /><b>Median House Value</b>: {Med_hu_val}<br /><b>Mean Travel Time to Work</b>: {Pop_Total}<br /> <br /><b>Total Population in 1980</b>: {tp_1980}<br /><b>Total Population in 1990</b>: {tp_1990}<br /><b>Total Population in 2000</b>: {tp_2000}<br /><b>Total Population in 2010</b>: {tp_2010}<br /><b><br />Census Tract Page</b>: <a href='{Tract_Website}' target='_blank'>Click for More Information</a>\"\r\n      }\r\n    ]\r\n  };\r\n\r\n  var bgTemplate = {\r\n    title: \"{Block_Group}\",\r\n    content: [\r\n      {\r\n        type: \"text\",\r\n        text:\r\n        \"<b>Total Population</b>: {Pop_Total}<br /><b>Total Number of Households</b>: {HH_Total}<br /><b>Total Number of Housing Units</b>: {HU_Total}<br /> <br /><b>White Population</b>: {Pop_White}<br /><b>Black Population</b>: {Pop_Black}<br /><b>Hispanic Population</b>: {Pop_Hispanic}<br /><b>Asian Population</b>: {Pop_Asian}<br /><b>Other Population</b>: {Pop_Other}<br /> <br /><b>People under age 5</b>: {Age_Under_5}<br /><b>People between age 5 and 17</b>: {Age_5to17}<br /><b>People between age 18 and 34</b>: {Age_18to34}<br /><b>People between age 35 and 64</b>: {Age_35to64}<br /><b>People Age 65 and Older</b>: {Age_65plus}<br /> <br /><b>Households with no car</b>: {Auto_0_Car}<br /><b>Households with 1 car</b>: {Auto_1_Car}<br /><b>Households with 2 cars</b>: {Auto_2_Car}<br /><b>Households with 3 cars</b>: {Auto_3_Car}<br /><b>Households with 4+ cars</b>: {Auto_4Plus_Car}<br /> <br /><b>People with no high school degree</b>: {Edu_No_High_School}<br /><b>People with high school degree</b>: {Edu_High_School}<br /><b>People with Associate/some degree</b>: {Edu_Associate}<br /><b>People with Bachelor's degree</b>: {Edu_Bachelors}<br /><b>People with graduate degree</b>: {Edu_Graduate}<br /> <br /><b>People who speak No English</b>: {Lang_No_Eng}<br /><b>People who speak English not well</b>: {Lang_Eng_Not_Well}<br /><b>People who speak English well</b>: {Lang_Eng_Well}<br /><b>People who speak English very well</b>: {Lang_Eng_Very_Well}<br /><b>People who speak English Only</b>: {Lang_Eng_Only}<br /> <br /><b>Households above poverty</b>: {Pov_Above}<br /><b>Households below poverty</b>: {Pov_Below}<br /><b>Household Income below 25k</b>: {Inc_Below_25}<br /><b>Household Income between 25k and 50k</b>: {Inc_25To50}<br /><b>Household Income between 50k and 100k</b>: {Inc_50To100}<br /><b>Household Income above 100k</b>: {Inc_Above_100}<br /><b>Median household income</b>: {Inc_HH_Median}<br /> <br /><b>Housing - owner occupied</b>: {H_Owner}<br /><b>Housing - renter occupied</b>:  {H_Renter}<br /> <br /><b>Means of travel to work - carpool</b>: {Mot_Carpool}<br /><b>Means of travel to work - drove alone</b>: {Mot_Drove_Alone}<br /><b>Means of travel to work - other</b>: {Mot_Other}<br /><b>Means of travel to work - ped/bike</b>: {Mot_Pedbike}<br /><b>Means of travel to work - telework</b>: {Mot_Telework}<br /><b>Means of travel to work - transit</b>: {Mot_Transit}<br /> <br /><b>Travel time to work - below 5 mins</b>: {Ttw_Below_5}<br /><b>Travel time to work - 5 to 15 mins</b>: {Ttw_5To15}<br /><b>Travel time to work - 15 to 30 mins</b>: {Ttw_15To30} <br /><b>Travel time to work - 30 to 60 mins</b>: {Ttw_30To60}<br /><b>Travel time to work - 60 mins and above</b>: {Ttw_60Plus}<br /> <br /><b>% of people with income below poverty level (past 12 months)</b>: {Pov_rate}<br /><b>Unemployment Rate</b>: {Unemp_rate}<br /><b>Median House Value</b>: {Med_hu_val}<br /><b>Mean Travel Time to Work</b>: {Pop_Total}<br /> <br /><b>Total Population in 1980</b>: {tp_1980}<br /><b>Total Population in 1990</b>: {tp_1990}<br /><b>Total Population in 2000</b>: {tp_2000}<br /><b>Total Population in 2010</b>: {tp_2010}\"\r\n      }\r\n    ]\r\n  };\r\n\r\n  var countyTemplate = {\r\n    title: \"{Name}\",\r\n    content: [\r\n      {\r\n        type: \"text\",\r\n        text:\r\n        \"<b>Total Population</b>: {Pop_Total}<br /><b>Total Number of Households</b>: {HH_Total}<br /><b>Total Number of Housing Units</b>: {HU_Total}<br /> <br /><b>White Population</b>: {Pop_White}<br /><b>Black Population</b>: {Pop_Black}<br /><b>Hispanic Population</b>: {Pop_Hispanic}<br /><b>Asian Population</b>: {Pop_Asian}<br /><b>Other Population</b>: {Pop_Other}<br /> <br /><b>People under age 5</b>: {Age_Under_5}<br /><b>People between age 5 and 17</b>: {Age_5to17}<br /><b>People between age 18 and 34</b>: {Age_18to34}<br /><b>People between age 35 and 64</b>: {Age_35to64}<br /><b>People Age 65 and Older</b>: {Age_65plus}<br /> <br /><b>Households with no car</b>: {Auto_0_Car}<br /><b>Households with 1 car</b>: {Auto_1_Car}<br /><b>Households with 2 cars</b>: {Auto_2_Car}<br /><b>Households with 3 cars</b>: {Auto_3_Car}<br /><b>Households with 4+ cars</b>: {Auto_4Plus_Car}<br /> <br /><b>People with no high school degree</b>: {Edu_No_High_School}<br /><b>People with high school degree</b>: {Edu_High_School}<br /><b>People with Associate/some degree</b>: {Edu_Associate}<br /><b>People with Bachelor's degree</b>: {Edu_Bachelors}<br /><b>People with graduate degree</b>: {Edu_Graduate}<br /> <br /><b>People who speak No English</b>: {Lang_No_Eng}<br /><b>People who speak English not well</b>: {Lang_Eng_Not_Well}<br /><b>People who speak English well</b>: {Lang_Eng_Well}<br /><b>People who speak English very well</b>: {Lang_Eng_Very_Well}<br /><b>People who speak English Only</b>: {Lang_Eng_Only}<br /> <br /><b>Households above poverty</b>: {Pov_Above}<br /><b>Households below poverty</b>: {Pov_Below}<br /><b>Household Income below 25k</b>: {Inc_Below_25}<br /><b>Household Income between 25k and 50k</b>: {Inc_25To50}<br /><b>Household Income between 50k and 100k</b>: {Inc_50To100}<br /><b>Household Income above 100k</b>: {Inc_Above_100}<br /><b>Median household income</b>: {Inc_HH_Median}<br /> <br /><b>Housing - owner occupied</b>: {H_Owner}<br /><b>Housing - renter occupied</b>:  {H_Renter}<br /> <br /><b>Means of travel to work - carpool</b>: {Mot_Carpool}<br /><b>Means of travel to work - drove alone</b>: {Mot_Drove_Alone}<br /><b>Means of travel to work - other</b>: {Mot_Other}<br /><b>Means of travel to work - ped/bike</b>: {Mot_Pedbike}<br /><b>Means of travel to work - telework</b>: {Mot_Telework}<br /><b>Means of travel to work - transit</b>: {Mot_Transit}<br /> <br /><b>Travel time to work - below 5 mins</b>: {Ttw_Below_5}<br /><b>Travel time to work - 5 to 15 mins</b>: {Ttw_5To15}<br /><b>Travel time to work - 15 to 30 mins</b>: {Ttw_15To30} <br /><b>Travel time to work - 30 to 60 mins</b>: {Ttw_30To60}<br /><b>Travel time to work - 60 mins and above</b>: {Ttw_60Plus}<br /> <br /><b>% of people with income below poverty level (past 12 months)</b>: {Pov_rate}<br /><b>Unemployment Rate</b>: {Unemp_rate}<br /><b>Median House Value</b>: {Med_hu_val}<br /><b>Mean Travel Time to Work</b>: {Pop_Total}<br /> <br /><b>Total Population in 1980</b>: {tp_1980}<br /><b>Total Population in 1990</b>: {tp_1990}<br /><b>Total Population in 2000</b>: {tp_2000}<br /><b>Total Population in 2010</b>: {tp_2010}<br /><b><br />County Page</b>: <a href='{County_Website}' target='_blank'>Click for More Information</a>\"\r\n      }\r\n    ]\r\n  };\r\n\r\n  //==========================\r\n  //Create the map and the map view\r\n  // var webmap = new WebMap({\r\n  //   portalItem:{\r\n  //       id: \"9f1826cb80d94582951c7e00146b6dcf\"\r\n  //   }\r\n  // });\r\n  var map = new Map({\r\n    basemap: \"streets-navigation-vector\"\r\n  });\r\n\r\n  var view = new MapView({\r\n    map: map,\r\n    container: \"viewDiv\",\r\n    center: [-95.444, 29.756],\r\n    zoom: 8\r\n  });\r\n  view.ui.remove(\"zoom\");\r\n\r\n  var censusBlocks = new FeatureLayer({\r\n    url:\r\n      \"https://gis.h-gac.com/arcgis/rest/services/Census_ACS/Census_ACS_5Yr_Block_Groups/MapServer/0\",\r\n    outFields: [\"*\"],\r\n    visible: false,\r\n    title: \"Block Groups\",\r\n    renderer: bgRenderer,\r\n    popupTemplate: bgTemplate\r\n  });\r\n\r\n  var query = censusBlocks.createQuery();\r\n  query.outFields = [\"Block_Group\"];\r\n  censusBlocks\r\n    .queryFeatures(query)\r\n    .then(bgFieldValues)\r\n    .then(addBGToValueSelect);\r\n\r\n  var censusTracts = new FeatureLayer({\r\n    url:\r\n      \"https://gis.h-gac.com/arcgis/rest/services/Census_ACS/Census_ACS_5Yr_Tracts/MapServer/0\",\r\n    outFields: [\"*\"],\r\n    visible: false,\r\n    title: \"Census Tracts\",\r\n    renderer: ctRenderer,\r\n    popupTemplate: ctTemplate\r\n  });\r\n\r\n  var ctQuery = censusTracts.createQuery();\r\n  ctQuery.outFields = [\"Tract\"];\r\n  censusTracts\r\n    .queryFeatures(ctQuery)\r\n    .then(ctFieldValues)\r\n    .then(addCTtoValueSelect);\r\n\r\n  var county = new FeatureLayer({\r\n    url:\r\n      \"https://gis.h-gac.com/arcgis/rest/services/Census_ACS/Census_ACS_5Yr_Counties/MapServer/0\",\r\n    outFields: [\"*\"],\r\n    title: \"Counties\",\r\n    renderer: countRenderer,\r\n    popupTemplate: countyTemplate\r\n  });\r\n\r\n  //Add the layers to the map\r\n  map.add(county);\r\n  map.add(censusTracts);\r\n  map.add(censusBlocks);\r\n\r\n  //============================\r\n  //Create the variables for the sidebar clicks\r\n  let $links = $(\".components li\");\r\n  let $arrows = $(\".arrow-left\");\r\n  let $panelDivs = $(\".panelDiv\");\r\n  let $content = $(\"#content\");\r\n\r\n  //Function for sidebar links click\r\n  $links.on(\"click\", function(e) {\r\n    let target = $(this).attr(\"panel-target\");\r\n    $(\"viewDiv\").css(\"visibility\", \"visible\");\r\n    $(\"container\").css(\"flex\", \"1\");\r\n\r\n    let isActive = $(this).hasClass(\"active\");\r\n    $links.removeClass(\"active\");\r\n    $arrows.hide();\r\n    $panelDivs.hide();\r\n\r\n    if (isActive) {\r\n      $content.hide();\r\n    } else {\r\n      $content.show();\r\n      var $allLinks = $(`[panel-target=${target}]`);\r\n\r\n      $allLinks.addClass(\"active\");\r\n      $allLinks.find(\".arrow-left\").show();\r\n\r\n      $(`div[panel-id=${target}]`).fadeIn(400);\r\n    }\r\n  });\r\n\r\n  //Close the content panel when clicked\r\n  $(\"#content\").on(\"click\", \".closePanel\", function() {\r\n    $(\"#viewDiv\").css(\"visibility\", \"visible\");\r\n    $(\"#container\").css(\"flex\", \"1\");\r\n    $links.removeClass(\"active\");\r\n    $arrows.hide();\r\n    $panelDivs.hide();\r\n    $content.hide();\r\n  });\r\n\r\n  //==================================\r\n  //Create the widgets for the application\r\n  var zoom = new Zoom({\r\n    view: view\r\n  });\r\n  view.ui.add(zoom, \"bottom-right\");\r\n\r\n  var home = new Home({\r\n    view: view\r\n  });\r\n  view.ui.add(home, \"bottom-right\");\r\n\r\n  var baseToggle = new BasemapToggle({\r\n    view: view,\r\n    nextBasemap: \"hybrid\"\r\n  });\r\n  view.ui.add(baseToggle, \"bottom-right\");\r\n\r\n  var layerList = new LayerList({\r\n    view: view,\r\n    container: document.getElementById(\"layerList\")\r\n  });\r\n\r\n  var legend = new Legend({\r\n    view: view,\r\n    container: document.getElementById(\"legendList\")\r\n  });\r\n\r\n  //=====================================\r\n  //Functions to populate the dropdown list\r\n  var valueSelect = document.getElementById(\"bgValueType\");\r\n  var bgReportValues = document.getElementById(\"bgAttSelect\");\r\n  var ctValueSelect = document.getElementById(\"ctValueType\");\r\n  var ctReportValues = document.getElementById(\"ctAttSelect\");\r\n  // var countValueType = document.getElementById(\"countValueType\");\r\n\r\n  function bgFieldValues(response) {\r\n    var features = response.features;\r\n    var values = features.map(feature => {\r\n      return feature.attributes.Block_Group;\r\n    });\r\n    return values;\r\n  }\r\n\r\n  function addBGToValueSelect(values) {\r\n    values.forEach((item, i) => {\r\n      if (\r\n        (bgValues.length < 1 || bgValues.indexOf(item) === -1) &&\r\n        item !== \"\"\r\n      ) {\r\n        bgValues.push(item);\r\n      }\r\n    });\r\n    bgValues.sort();\r\n    bgValues.forEach(value => {\r\n      var option = document.createElement(\"option\");\r\n      var option2 = document.createElement(\"option\");\r\n      option.text = value;\r\n      option2.text = value;\r\n      valueSelect.add(option);\r\n      bgReportValues.add(option2);\r\n    });\r\n  }\r\n\r\n  function ctFieldValues(response) {\r\n    var features = response.features;\r\n    var values = features.map(feature => {\r\n      return feature.attributes.Tract;\r\n    });\r\n    return values;\r\n  }\r\n\r\n  function addCTtoValueSelect(values) {\r\n    values.forEach((item, i) => {\r\n      if (\r\n        (ctValues.length < 1 || ctValues.indexOf(item) === -1) &&\r\n        item !== \"\"\r\n      ) {\r\n        ctValues.push(item);\r\n      }\r\n    });\r\n    ctValues.sort();\r\n    ctValues.forEach(value => {\r\n      var ctOption = document.createElement(\"option\");\r\n      var ctOption2 = document.createElement(\"option\");\r\n      ctOption.text = value;\r\n      ctOption2.text = value;\r\n      ctValueSelect.add(ctOption);\r\n      ctReportValues.add(ctOption2);\r\n    });\r\n  }\r\n\r\n  //===================================\r\n  //Check to see which dropdown has been selected\r\n  $(\"#boundaryType\").change(() => {\r\n    var selValue = $(\"#boundaryType\").val();\r\n    if (selValue == \"BlockGroups\") {\r\n      $(\"#bgValueType\").show();\r\n      $(\"#bgValueType\").css(\"visibility\", \"visible\");\r\n      $(\"#ctValueType\").hide();\r\n      $(\"#ctValueType\").css(\"visibility\", \"hidden\");\r\n      $(\"#countValueType\").hide();\r\n      $(\"#countValueType\").css(\"visibility\", \"hidden\");\r\n    } else if (selValue == \"CensusTracts\") {\r\n      $(\"#bgValueType\").hide();\r\n      $(\"#bgValueType\").css(\"visibility\", \"hidden\");\r\n      $(\"#ctValueType\").show();\r\n      $(\"#ctValueType\").css(\"visibility\", \"visible\");\r\n      $(\"#countValueType\").hide();\r\n      $(\"#countValueType\").css(\"visibility\", \"hidden\");\r\n    } else if (selValue == \"County\") {\r\n      $(\"#bgValueType\").hide();\r\n      $(\"#bgValueType\").css(\"visibility\", \"hidden\");\r\n      $(\"#ctValueType\").hide();\r\n      $(\"#ctValueType\").css(\"visibility\", \"hidden\");\r\n      $(\"#countValueType\").show();\r\n      $(\"#countValueType\").css(\"visibility\", \"visible\");\r\n    }\r\n  });\r\n\r\n  //Dropdown for the reporting \"widget\"\r\n  $(\"#boundary\").change(() => {\r\n    var selValue = $(\"#boundary\").val();\r\n    if (selValue == \"BlockGroups_1\") {\r\n      $(\"#bgAttSelect\").show();\r\n      $(\"#bgAttSelect\").css(\"visibility\", \"visible\");\r\n      $(\"#ctAttSelect\").hide();\r\n      $(\"#ctAttSelect\").css(\"visibility\", \"hidden\");\r\n      $(\"#countyAttSelect\").hide();\r\n      $(\"#countyAttSelect\").css(\"visibility\", \"hidden\");\r\n    } else if (selValue == \"CensusTracts_1\") {\r\n      $(\"#bgAttSelect\").hide();\r\n      $(\"#bgAttSelect\").css(\"visibility\", \"hidden\");\r\n      $(\"#ctAttSelect\").show();\r\n      $(\"#ctAttSelect\").css(\"visibility\", \"visible\");\r\n      $(\"#countyAttSelect\").hide();\r\n      $(\"#countyAttSelect\").css(\"visibility\", \"hidden\");\r\n    } else if (selValue == \"County_1\") {\r\n      $(\"#bgAttSelect\").hide();\r\n      $(\"#bgAttSelect\").css(\"visibility\", \"hidden\");\r\n      $(\"#ctAttSelect\").hide();\r\n      $(\"#ctAttSelect\").css(\"visibility\", \"hidden\");\r\n      $(\"#countyAttSelect\").show();\r\n      $(\"#countyAttSelect\").css(\"visibility\", \"visible\");\r\n    }\r\n  });\r\n\r\n  //=================================\r\n  //Determine the value to apply for the filter\r\n  $(\"#queryResults\").click(() => {\r\n    var selValue = $(\"#boundaryType\").val();\r\n    if (selValue == \"County\") {\r\n      var value = $(\"#countValueType\").val();\r\n      view.whenLayerView(county).then(layerView => {\r\n        let countyLayerView = layerView;\r\n        countyLayerView.effect = {\r\n          filter: {\r\n            where: \"Name = '\" + value + \" County'\"\r\n          },\r\n          excludedEffect: \"grayscale(100%) opacity(50%)\"\r\n        };\r\n      });\r\n    } else if (selValue == \"CensusTracts\") {\r\n      var ctValue = $(\"#ctValueType\").val();\r\n      view.whenLayerView(censusTracts).then(layerView => {\r\n        layerView.effect = {\r\n          filter: {\r\n            where: \"Tract = '\" + ctValue + \"'\"\r\n          },\r\n          excludedEffect: \"opacity(0%)\"\r\n        };\r\n      });\r\n    } else if (selValue == \"BlockGroups\") {\r\n      var bgValue = $(\"#bgValueType\").val();\r\n      view.whenLayerView(censusBlocks).then(layerView => {\r\n        layerView.effect = {\r\n          filter: {\r\n            where: \"Block_Group = '\" + bgValue + \"'\"\r\n          },\r\n          excludedEffect: \"opacity(0%)\"\r\n        };\r\n      });\r\n    }\r\n  });\r\n\r\n  $(\"#clearResults\").click(() => {\r\n    view.whenLayerView(county).then(layerView => {\r\n      let countyLayerView = layerView;\r\n      countyLayerView.effect = null;\r\n    });\r\n    view.whenLayerView(censusTracts).then(layerView => {\r\n      layerView.effect = null;\r\n    });\r\n    view.whenLayerView(censusBlocks).then(layerView => {\r\n      layerView.effect = null;\r\n    });\r\n  });\r\n\r\n  //=============================\r\n  //Testing the creation of a grid table\r\n  var gridDiv = document.getElementById(\"reportList\");\r\n  var gridFields = [\"__OBJECTID\",\"tp_1980\",\"tp_1990\",\"tp_2000\",\"tp_2010\",\"Pop_Total\",\"Pop_White\",\"Pop_Black\",\"Pop_Hispanic\",\"Pop_Asian\",\"Pop_Other\",\"Auto_0_Car\",\"Auto_1_Car\",\"Auto_2_Car\",\"Auto_3_Car\",\"Auto_4Plus_Car\",\"Age_Under_5\",\"Age_5to17\",\"Age_18to34\",\"Age_35to64\",\"Age_65plus\",\"Edu_No_High_School\",\"Edu_High_School\",\"Edu_Associate\",\"Edu_Bachelors\",\"Edu_Graduate\",\"Lang_No_Eng\",\"Lang_Eng_Not_Well\",\"Lang_Eng_Well\",\"Lang_Eng_Very_Well\",\"Lang_Eng_Only\",\"Inc_Below_25\",\"Inc_25To50\",\"Inc_50To100\",\"Inc_Above_100\",\"Inc_HH_Median\"];\r\n  let grid, carGrid, ageGrid, educateGrid, langGrid, incomeGrid, populationGrid;\r\n\r\n  //Create a new datastore for the on demandgrid\r\n  var dataStore = new StoreAdapter({\r\n    objectStore: new Memory({\r\n      idProperty: \"__OBJECTID\"\r\n    })\r\n  });\r\n\r\n  //County query tasks\r\n  var countyTask = new QueryTask({\r\n      url: \"https://gis.h-gac.com/arcgis/rest/services/Census_ACS/Census_ACS_5Yr_Counties/MapServer/0\"\r\n  });\r\n\r\n  //Block Group query tasks\r\n  var blockTask = new QueryTask({\r\n    url: \"https://gis.h-gac.com/arcgis/rest/services/Census_ACS/Census_ACS_5Yr_Block_Groups/MapServer/0\"\r\n  });\r\n\r\n  //Census Tracts query tasks\r\n  var tractTask = new QueryTask({\r\n    url: \"https://gis.h-gac.com/arcgis/rest/services/Census_ACS/Census_ACS_5Yr_Tracts/MapServer/0\"\r\n  });\r\n\r\n  var params = new Query({\r\n      returnGeometry: true\r\n  });\r\n\r\n  $(\"#doBtn\").on(\"click\", doQuery);\r\n\r\n  function popGrid(response) {\r\n    var graphics = response.features;\r\n    createGrid(response.fields);\r\n\r\n    var data = graphics.map((feature, i) => {\r\n        return Object.keys(feature.attributes)\r\n            .filter((key) => {\r\n                return (gridFields.indexOf(key) !== -1);\r\n            })\r\n            .reduce((obj, key) => {\r\n                obj[key] = feature.attributes[key];\r\n                return obj;\r\n            }, {});\r\n    });\r\n    dataStore.objectStore.data = data;\r\n    grid.set(\"collection\", dataStore);\r\n    carGrid.set(\"collection\", dataStore);\r\n    ageGrid.set(\"collection\", dataStore);\r\n    educateGrid.set(\"collection\", dataStore);\r\n    langGrid.set(\"collection\", dataStore);\r\n    incomeGrid.set(\"collection\", dataStore);\r\n    populationGrid.set(\"collection\", dataStore);\r\n  }\r\n\r\n  function createGrid(fields) {\r\n    var columns = fields\r\n      .filter((field, i) => {\r\n        if (gridFields.indexOf(field.name) !== -1) {\r\n          return field;\r\n        }\r\n      })\r\n      .map((field) => {\r\n        if (field.name === \"__OBJECTID\") {\r\n          return {\r\n            field: field.name,\r\n            label: field.name,\r\n            sortable: true,\r\n            hidden: true\r\n          };\r\n        } else {\r\n          return {\r\n            field: field.name,\r\n            label: field.alias,\r\n            sortable: true\r\n          };\r\n        }\r\n      });\r\n\r\n    grid = new(declare([OnDemandGrid, Selection]))({\r\n        columns: {\r\n            \"Pop_White\": {\"label\": \"White Population\", \"formatter\": dojoNum.format},\r\n            \"Pop_Black\": {\"label\": \"Black Population\", \"formatter\": dojoNum.format},\r\n            \"Pop_Hispanic\": {\"label\": \"Hispanic Population\", \"formatter\": dojoNum.format},\r\n            \"Pop_Asian\": {\"label\": \"Asian Population\", \"formatter\": dojoNum.format},\r\n            \"Pop_Other\": {\"label\": \"Other Population\", \"formatter\": dojoNum.format}\r\n        }\r\n    }, \"grid\");\r\n\r\n    ageGrid = new(declare([OnDemandGrid, Selection]))({\r\n      columns: {\r\n        \"Age_Under_5\": {\"label\":\"5 & Under\", \"formatter\": dojoNum.format},\r\n        \"Age_5to17\": {\"label\":\"5 to 17\", \"formatter\": dojoNum.format},\r\n        \"Age_18to34\": {\"label\":\"18 to 34\", \"formatter\": dojoNum.format},\r\n        \"Age_35to64\": {\"label\":\"35 to 64\", \"formatter\": dojoNum.format},\r\n        \"Age_65plus\": {\"label\":\"65 & Older\", \"formatter\": dojoNum.format}\r\n      }\r\n    }, \"agegrid\");\r\n\r\n    carGrid = new(declare([OnDemandGrid, Selection]))({\r\n      columns: {\r\n        \"Auto_0_Car\": {\"label\":\"No Cars\", \"formatter\": dojoNum.format},\r\n        \"Auto_1_Car\": {\"label\":\"1 Car\", \"formatter\": dojoNum.format},\r\n        \"Auto_2_Car\": {\"label\":\"2 Cars\", \"formatter\": dojoNum.format},\r\n        \"Auto_3_Car\": {\"label\":\"3 Cars\", \"formatter\": dojoNum.format},\r\n        \"Auto_4Plus_Car\": {\"label\":\"4+ Cars\", \"formatter\": dojoNum.format}\r\n      }\r\n    }, \"cargrid\");\r\n\r\n    educateGrid = new(declare([OnDemandGrid, Selection]))({\r\n      columns: {\r\n        \"Edu_No_High_School\": {\"label\":\"No High School\", \"formatter\": dojoNum.format},\r\n        \"Edu_High_School\": {\"label\":\"Only High School\", \"formatter\": dojoNum.format},\r\n        \"Edu_Associate\": {\"label\":\"Associate's Degree\", \"formatter\": dojoNum.format},\r\n        \"Edu_Bachelors\": {\"label\":\"Bachelor's Degree\", \"formatter\": dojoNum.format},\r\n        \"Edu_Graduate\": {\"label\":\"Graduate Degree\", \"formatter\": dojoNum.format}\r\n      }\r\n    }, \"educationgrid\");\r\n    \r\n    langGrid = new(declare([OnDemandGrid, Selection]))({\r\n      columns: {\r\n        \"Lang_No_Eng\": {\"label\":\"No English\", \"formatter\": dojoNum.format},\r\n        \"Lang_Eng_Not_Well\": {\"label\":\"English Not Well\", \"formatter\": dojoNum.format},\r\n        \"Lang_Eng_Well\": {\"label\":\"English Well\", \"formatter\": dojoNum.format},\r\n        \"Lang_Eng_Very_Well\": {\"label\":\"English Very Well\", \"formatter\": dojoNum.format},\r\n        \"Lang_Eng_Only\": {\"label\":\"English Only\", \"formatter\": dojoNum.format}\r\n      }\r\n    }, \"langgrid\");\r\n\r\n    incomeGrid = new(declare([OnDemandGrid, Selection]))({\r\n      columns: {\r\n        \"Inc_Below_25\": {\"label\":\"Income Below 25K\", \"formatter\": dojoNum.format},\r\n        \"Inc_25To50\": {\"label\":\"Income Between 25 & 50K\", \"formatter\": dojoNum.format},\r\n        \"Inc_50To100\": {\"label\":\"Income Between 50 & 100K\", \"formatter\": dojoNum.format},\r\n        \"Inc_Above_100\": {\"label\":\"Income Above 100k\", \"formatter\": dojoNum.format},\r\n        \"Inc_HH_Median\": {\"label\":\"Median Household Income\", \"formatter\": dojoNum.format}\r\n      }\r\n    }, \"incomegrid\");\r\n\r\n    populationGrid = new(declare([OnDemandGrid, Selection]))({\r\n      columns: {\r\n        \"Pop_Total\": {\"label\":\"Current Total Population\", \"formatter\": dojoNum.format},\r\n        \"tp_2010\": {\"label\":\"Total Population in 2010\", \"formatter\": dojoNum.format},\r\n        \"tp_2000\": {\"label\":\"Total Population in 2000\", \"formatter\": dojoNum.format},\r\n        \"tp_1990\": {\"label\":\"Total Population in 1990\", \"formatter\": dojoNum.format},\r\n        \"tp_1980\": {\"label\":\"Total Population in 1980\", \"formatter\": dojoNum.format}\r\n      }\r\n    }, \"populationgrid\");\r\n  }\r\n\r\n  function doClear(){\r\n    if (grid && carGrid && ageGrid && educateGrid){\r\n      dataStore.objectStore.data = {};\r\n      grid.set(\"collection\", dataStore);\r\n      carGrid.set(\"collection\", dataStore);\r\n      ageGrid.set(\"collection\", dataStore);\r\n      educateGrid.set(\"collection\", dataStore);\r\n      langGrid.set(\"collection\", dataStore);\r\n      incomeGrid.set(\"collection\", dataStore);\r\n      populationGrid.set(\"collection\", dataStore);\r\n    }\r\n  }\r\n\r\n  function doQuery(){\r\n    doClear();\r\n    var boundaryValue = $(\"#boundary\").val();\r\n    if (boundaryValue == \"BlockGroups_1\"){\r\n      var attributeName = $(\"#bgAttSelect\").val();\r\n      params.where = \"Block_Group = '\" + attributeName + \"'\";\r\n      params.outFields = [\"*\"];\r\n      blockTask.execute(params)\r\n        .then(popGrid);\r\n    } else if (boundaryValue == \"CensusTracts_1\"){\r\n      var ctAttributeName = $(\"#ctAttSelect\").val();\r\n      params.where = \"Tract = '\" + ctAttributeName + \"'\";\r\n      params.outFields = [\"*\"];\r\n      tractTask.execute(params)\r\n        .then(popGrid);\r\n    } else if (boundaryValue == \"County_1\"){\r\n      var countyAttributeName = $(\"#countyAttSelect\").val();\r\n      params.where = \"Name = '\" + countyAttributeName + \" County'\";\r\n      console.log(params.where);\r\n      params.outFields = [\"*\"];\r\n\r\n      countyTask.execute(params)\r\n          .then(popGrid);\r\n    }\r\n  }\r\n\r\n  //Export the grid table to a CSV file\r\n  $(\"#export\").on(\"click\", function(){\r\n    customExportCSV(dataStore);\r\n  });\r\n\r\n\r\n  function customExportCSV(evt){\r\n    var data = evt.objectStore.data;\r\n    console.log(data);\r\n    var csv = convertArrayOfObjectsToCSV({\r\n      data: data\r\n    });\r\n\r\n    csv = \"data:text/csv;charset=utf-8,\" + csv;\r\n\r\n    var encodedUri = encodeURI(csv);\r\n    var link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", encodedUri);\r\n    link.setAttribute(\"download\", \"Export.csv\");\r\n    link.click();\r\n  }\r\n\r\n  function convertArrayOfObjectsToCSV(value){\r\n    var result, ctr, keys, columnDelimiter, lineDelimiter, data;\r\n\r\n    data = value.data || null;\r\n    if (data == null || !data.length){\r\n      return null;\r\n    }\r\n\r\n    columnDelimiter = value.columnDelimiter || \",\";\r\n    lineDelimiter = value.lineDelimiter || \"\\n\";\r\n\r\n    keys = Object.keys(data[\"0\"]);\r\n    result = \"\";\r\n    result += keys.join(columnDelimiter);\r\n    result += lineDelimiter;\r\n\r\n    data.forEach(function(item){\r\n      ctr = 0;\r\n      keys.forEach(function(key){\r\n        result += item[key];\r\n        result += columnDelimiter;\r\n      });\r\n      result += lineDelimiter;\r\n    });\r\n    return result;\r\n  }\r\n\r\n\r\n});\r\n"],"file":"main.js"}